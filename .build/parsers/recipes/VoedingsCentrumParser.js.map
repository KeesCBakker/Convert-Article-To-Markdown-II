{
  "version": 3,
  "sources": ["../../../parsers/recipes/VoedingsCentrumParser.ts"],
  "sourcesContent": ["import { RecipeParser, remove } from './RecipeParser';\nimport { capitalizeFirstLetterEndWithDot } from \"./common\"\n\nexport class VoedingsCentrumParser extends RecipeParser {\n\n  canParse(url: URL) {\n    return (\n      url.hostname == \"voedingscentrum.nl\" ||\n      url.hostname == \"www.voedingscentrum.nl\"\n    );\n  }\n\n  protected parseHeader(document: Document) {\n    let header = super.parseHeader(document)\n\n    let subHeader = \"\"\n\n    let porties = (document.querySelector('.informatie .personen')?.textContent || '').trim()\n    if (porties) {\n      porties = porties.replace(/\\s+(personen|porties)\\s+/i, '')\n      subHeader += `porties: ${porties}\\n`\n    }\n\n    let timing = (document.querySelector('.informatie .bereiding')?.textContent || '').trim()\n    if (timing) {\n      subHeader += `tijd: ${timing}\\n`\n    }\n\n    let calories = (document.querySelector('*[itemprop=calories]')?.textContent || '').trim()\n    if (calories) {\n      calories = calories.replace(/\\s+/, \" \")\n      subHeader += `energie: ${calories}\\n`\n    }\n\n    subHeader += \"---\\n\\n\"\n\n    return header.replace(\"---\\n\\n\", subHeader)\n  }\n\n\n  protected preParse(document: Document) {\n    ['.ingredienten h3'].forEach(selector => remove(document, selector))\n  }\n\n  protected getTagSelector() {\n    return \".infomatie .gerecht\";\n  }\n\n  protected getIngredientsNode(document: Document): HTMLElement | null {\n    return document.querySelector(\".ingredienten\")\n  }\n\n  protected getStepsNode(document: Document): HTMLElement | null {\n    return document.querySelector(\"*[itemprop=recipeInstructions]\")\n  }\n\n  protected getDescriptionNode(document: Document): HTMLElement | null {\n    return document.querySelector(\"*[itemprop=description]\")\n  }\n\n  protected getTipsNode(document: Document): HTMLElement | null {\n    return null\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA,0BAAqC;AAG9B,oCAAoC,iCAAa;AAAA,EAEtD,SAAS,KAAU;AACjB,WACE,IAAI,YAAY,wBAChB,IAAI,YAAY;AAAA;AAAA,EAIV,YAAY,UAAoB;AAZ5C;AAaI,QAAI,SAAS,MAAM,YAAY;AAE/B,QAAI,YAAY;AAEhB,QAAI,UAAW,iBAAS,cAAc,6BAAvB,mBAAiD,gBAAe,IAAI;AACnF,QAAI,SAAS;AACX,gBAAU,QAAQ,QAAQ,6BAA6B;AACvD,mBAAa,YAAY;AAAA;AAAA;AAG3B,QAAI,SAAU,iBAAS,cAAc,8BAAvB,mBAAkD,gBAAe,IAAI;AACnF,QAAI,QAAQ;AACV,mBAAa,SAAS;AAAA;AAAA;AAGxB,QAAI,WAAY,iBAAS,cAAc,4BAAvB,mBAAgD,gBAAe,IAAI;AACnF,QAAI,UAAU;AACZ,iBAAW,SAAS,QAAQ,OAAO;AACnC,mBAAa,YAAY;AAAA;AAAA;AAG3B,iBAAa;AAEb,WAAO,OAAO,QAAQ,WAAW;AAAA;AAAA,EAIzB,SAAS,UAAoB;AACrC,KAAC,oBAAoB,QAAQ,cAAY,gCAAO,UAAU;AAAA;AAAA,EAGlD,iBAAiB;AACzB,WAAO;AAAA;AAAA,EAGC,mBAAmB,UAAwC;AACnE,WAAO,SAAS,cAAc;AAAA;AAAA,EAGtB,aAAa,UAAwC;AAC7D,WAAO,SAAS,cAAc;AAAA;AAAA,EAGtB,mBAAmB,UAAwC;AACnE,WAAO,SAAS,cAAc;AAAA;AAAA,EAGtB,YAAY,UAAwC;AAC5D,WAAO;AAAA;AAAA;",
  "names": []
}
